// Generated by @lagless/codegen. Do not edit manually.
import { MemoryTracker } from '@lagless/misc';

export class <%= component.name %> {
  public static readonly name = '<%= component.name %>';
  public static readonly ID = <%= component.id %>;
  public static readonly schema = {
  <% for (const [fieldName, field] of Object.entries(fields)) { %>
    <%= fieldName %>: <%= typeToArrayConstructor[field.type].name %>,
  <% } %>
  };

  public readonly unsafe = {} as {
  <% for (const [fieldName, field] of Object.entries(fields)) { %>
    <%= fieldName %>: <%= typeToArrayConstructor[field.type].name %>;
  <% } %>
  };

  constructor(maxEntities: number, buffer: ArrayBuffer, memTracker: MemoryTracker) {
    for (const [fieldName, TypedArrayConstructor] of Object.entries(<%= component.name %>.schema)) {
      const typedArray = new TypedArrayConstructor(buffer, memTracker.ptr, maxEntities);
      this.unsafe[fieldName as keyof typeof <%= component.name %>.schema] = typedArray as <%= component.name %>['unsafe'][keyof <%= component.name %>['unsafe']];
      memTracker.add(typedArray.byteLength);
    }
  }

  public static calculateSize(maxEntities: number, memTracker: MemoryTracker): void {
    for (const [, TypedArrayConstructor] of Object.entries(this.schema)) {
      memTracker.add(maxEntities * TypedArrayConstructor.BYTES_PER_ELEMENT);
    }
  }
}
