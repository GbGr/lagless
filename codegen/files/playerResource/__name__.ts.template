// Generated by @lagless/codegen. Do not edit manually.
import { MemoryTracker } from '@lagless/misc';

export class <%= playerResource.name %> {
  public static readonly name = '<%= playerResource.name %>';
  public static readonly schema = {
  <% for (const [fieldName, field] of Object.entries(fields)) { %>
    <%= fieldName %>: <%= typeToArrayConstructor[field.type].name %>,
  <% } %>
  };

  public readonly unsafe = {} as {
  <% for (const [fieldName, field] of Object.entries(fields)) { %>
    <%= fieldName %>: <%= typeToArrayConstructor[field.type].name %>;
  <% } %>
  };

  constructor(buffer: ArrayBuffer, memTracker: MemoryTracker) {
    <% for (const [fieldName, field] of Object.entries(fields)) { %>
      // <%= fieldName %>
      this.unsafe['<%= fieldName %>'] = new <%= typeToArrayConstructor[field.type].name %>(buffer, memTracker.ptr, <%= field.isArray && field.arrayLength ? field.arrayLength : 1 %>);
      memTracker.add(<%= typeToArrayConstructor[field.type].name %>.BYTES_PER_ELEMENT * (<%= field.isArray && field.arrayLength ? field.arrayLength : 1 %>));
    <% } %>
  }

  public static calculateSize(memTracker: MemoryTracker): void {
    <% for (const [fieldName, field] of Object.entries(fields)) { %>
      // <%= fieldName %>
      memTracker.add(<%= typeToArrayConstructor[field.type].name %>.BYTES_PER_ELEMENT * (<%= field.isArray && field.arrayLength ? field.arrayLength : 1 %>));
    <% } %>
  }
}
