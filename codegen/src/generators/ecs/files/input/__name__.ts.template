// Generated by @lagless/codegen. Do not edit manually.
import { FieldType } from '@lagless/types';

export class <%= input.name %> {
  public static readonly id = <%= input.id %>;
  public readonly id = <%= input.id %>;

  <% let totalByteLength = input.fields.reduce((acc, field) => acc + field.byteLength, 0); %>

  // <%= input.fields.map((field) => field.byteLength).join(' + ') %> = <%= totalByteLength %>;
  public readonly byteLength = <%= totalByteLength %>;

  public readonly fields = [
    <% for (const field of input.fields) { %>
    <% if (field.isArray) { %>
    { name: '<%= field.name %>', type: FieldType.<%= FieldTypeReverse[field.type] %>, isArray: true, arrayLength: <%= field.arrayLength %>, byteLength: <%= field.byteLength %> },
    <% } else { %>
    { name: '<%= field.name %>', type: FieldType.<%= FieldTypeReverse[field.type] %>, isArray: false, byteLength: <%= field.byteLength %> },
    <% } %>
    <% } %>
  ];

  public readonly schema!: {
    <% for (const field of input.fields) { %>
    <% if (field.isArray) { %>
    <%= field.name %>: <%= typedArrayConstructors[field.type].name %>,
    <% } else { %>
    <%= field.name %>: number,
    <% } %>
    <% } %>
  };

}
