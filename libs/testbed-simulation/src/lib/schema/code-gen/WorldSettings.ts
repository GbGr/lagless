// Generated by @lagless/codegen. Do not edit manually.
import { MemoryTracker } from '@lagless/misc';

export class WorldSettings {
  public static readonly name = 'WorldSettings';
  public static readonly schema = {
    resources: Uint8Array,

    resourcesLeft: Uint32Array,
  };

  public readonly unsafe = {} as {
    resources: Uint8Array;

    resourcesLeft: Uint32Array;
  };

  constructor(buffer: ArrayBuffer, memTracker: MemoryTracker) {
    // resources
    this.unsafe['resources'] = new Uint8Array(buffer, memTracker.ptr, 16);
    memTracker.add(Uint8Array.BYTES_PER_ELEMENT * 16);

    // resourcesLeft
    this.unsafe['resourcesLeft'] = new Uint32Array(buffer, memTracker.ptr, 1);
    memTracker.add(Uint32Array.BYTES_PER_ELEMENT * 1);
  }

  public static calculateSize(memTracker: MemoryTracker): void {
    // resources
    memTracker.add(Uint8Array.BYTES_PER_ELEMENT * 16);

    // resourcesLeft
    memTracker.add(Uint32Array.BYTES_PER_ELEMENT * 1);
  }
}
