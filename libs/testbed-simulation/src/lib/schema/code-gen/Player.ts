// Generated by @lagless/codegen. Do not edit manually.
import { MemoryTracker } from '@lagless/misc';

export class Player {
  public static readonly name = 'Player';
  public static readonly ID = 4;
  public static readonly schema = {
    slot: Uint8Array,
  };

  public readonly unsafe = {} as {
    slot: Uint8Array;
  };

  constructor(
    maxEntities: number,
    buffer: ArrayBuffer,
    memTracker: MemoryTracker
  ) {
    for (const [fieldName, TypedArrayConstructor] of Object.entries(
      Player.schema
    )) {
      const typedArray = new TypedArrayConstructor(
        buffer,
        memTracker.ptr,
        maxEntities
      );
      this.unsafe[fieldName as keyof typeof Player.schema] =
        typedArray as Player['unsafe'][keyof Player['unsafe']];
      memTracker.add(typedArray.byteLength);
    }
  }

  public static calculateSize(
    maxEntities: number,
    memTracker: MemoryTracker
  ): void {
    for (const [, TypedArrayConstructor] of Object.entries(this.schema)) {
      memTracker.add(maxEntities * TypedArrayConstructor.BYTES_PER_ELEMENT);
    }
  }
}
